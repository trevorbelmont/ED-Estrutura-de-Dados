1. O principal erro era que fact não era inicializada - o que o valgrind apontou. Porém não havia tratamento de excessão nem definição de fatorial de 0;
  Porém optei por tratar as excessões, definir o fatorial de 0 e 1 e definir fatorial como long long int - para um n alto.


2.
valgrind -q --log-file="logs/14_log_ruim" --leak-check=full ./bin/c14errado.exe
cat logs/14_log_ruim >> c14relatorio.txt

==16714== Memcheck, a memory error detector
==16714== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16714== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==16714== Command: ./bin/c14errado.exe
==16714== Parent PID: 16669
==16714== 
==16714== Conditional jump or move depends on uninitialised value(s)
==16714==    at 0x48B829F: __vfprintf_internal (vfprintf-internal.c:1687)
==16714==    by 0x48A3D9A: printf (printf.c:33)
==16714==    by 0x1091AD: main (c14.c:12)
==16714== 
==16714== Use of uninitialised value of size 8
==16714==    at 0x489DEFB: _itoa_word (_itoa.c:179)
==16714==    by 0x48B78B7: __vfprintf_internal (vfprintf-internal.c:1687)
==16714==    by 0x48A3D9A: printf (printf.c:33)
==16714==    by 0x1091AD: main (c14.c:12)
==16714== 
==16714== Conditional jump or move depends on uninitialised value(s)
==16714==    at 0x489DF0C: _itoa_word (_itoa.c:179)
==16714==    by 0x48B78B7: __vfprintf_internal (vfprintf-internal.c:1687)
==16714==    by 0x48A3D9A: printf (printf.c:33)
==16714==    by 0x1091AD: main (c14.c:12)
==16714== 
==16714== Conditional jump or move depends on uninitialised value(s)
==16714==    at 0x48B8660: __vfprintf_internal (vfprintf-internal.c:1687)
==16714==    by 0x48A3D9A: printf (printf.c:33)
==16714==    by 0x1091AD: main (c14.c:12)
==16714== 
==16714== Conditional jump or move depends on uninitialised value(s)
==16714==    at 0x48B7A2E: __vfprintf_internal (vfprintf-internal.c:1687)
==16714==    by 0x48A3D9A: printf (printf.c:33)
==16714==    by 0x1091AD: main (c14.c:12)
==16714== 
==16714== 
==16714== HEAP SUMMARY:
==16714==     in use at exit: 0 bytes in 0 blocks
==16714==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==16714== 
==16714== All heap blocks were freed -- no leaks are possible
==16714== 
==16714== Use --track-origins=yes to see where uninitialised values come from
==16714== For lists of detected and suppressed errors, rerun with: -s
==16714== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)

touch c14correto.c && cat c14.c c14correto.c 


4.
gcc c14.c -o bin/c14correto.exe -g 
 valgrind --log-file="logs/log_bom_14" --leak-check=full ./bin/c14correto.exe
 
cat logs/14_log_bom >> c14relatorio.txt
==16765== Memcheck, a memory error detector
==16765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16765== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==16765== Command: ./bin/c14correto.exe
==16765== Parent PID: 16669
==16765== 
==16765== 
==16765== HEAP SUMMARY:
==16765==     in use at exit: 0 bytes in 0 blocks
==16765==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==16765== 
==16765== All heap blocks were freed -- no leaks are possible
==16765== 
==16765== For lists of detected and suppressed errors, rerun with: -s
==16765== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
