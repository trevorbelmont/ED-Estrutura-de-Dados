--------------------------------------------------------------------------------
Profile data file 'callgrind.out.1816' (creator: callgrind-3.16.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 103525381
Trigger: Program termination
Profiled target:  ./a.out (PID 1816, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
889,235,259 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
695,335,088 (78.19%)  passeio.h:updateKnightMoves(int, int, int) [/home/devdias93/ED/TP6/a.out]
158,611,530 (17.84%)  passeio.h:updateKnightMoves(int, int, int)'2 [/home/devdias93/ED/TP6/a.out]
 18,150,076 ( 2.04%)  passeio.h:ride(int, int, int)'2 [/home/devdias93/ED/TP6/a.out]
  5,765,059 ( 0.65%)  passeio.h:bestMove(int, int) [/home/devdias93/ED/TP6/a.out]
  4,497,294 ( 0.51%)  ./math/../sysdeps/ieee754/dbl-64/e_pow.c:__ieee754_pow_sse2 [/usr/lib/x86_64-linux-gnu/libm-2.31.so]

--------------------------------------------------------------------------------
-- Auto-annotated source: passeio.h
--------------------------------------------------------------------------------
Ir                   

-- line 50 ----------------------------------------
          .           pos tile[DIMENSIONS][DIMENSIONS];  // declara matriz do tabuleiro n x n
          .           int dim;                           // declaa variável de dimensão do tabuleiro
          .           int passo;                         // declara variável do passo de cada casa no passeio
          .           int visitadas, regredidas;         // respectivamente contador de passos totais e de retornos das tentativas
          .           
          .           // Durante o desenvolvimento considerei mais intuitivo nomear as variáveis x e y como coordenadas cartesianas (não como entradas de matriz).
          .           // Dentro função passeio, portanto, o par ordenado (x,y) designa uma certa posição (horizontal, vertical). Ou seja, (coluna, linha).
          .           //  A sintaxe da chamada da função, no entanto, segue a ordem definida na especificação do TP: passeio (linha, coluna).
         15 ( 0.00%)  void passeio(int y, int x) {
          .               FILE *saida;                      // ponteiro que aponta arquivo
         19 ( 0.00%)      saida = fopen("saida.txt", "a");  // abre o arquivo no modo apend - cria o arquivo se necessário
      1,284 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_fxsave (1x)
        922 ( 0.00%)  => ./libio/iofopen.c:fopen@@GLIBC_2.2.5 (2x)
          .           
          .               // adequa o valor da entrada x e y,[1,8], aos valores do código, [0,7]
          3 ( 0.00%)      x--;
          3 ( 0.00%)      y--;
          .           
          .               // prepara tabuleiro e inicializa as variáveis para seus valores iniciais devidos
          3 ( 0.00%)      setup();
  6,024,701 ( 0.68%)  => passeio.h:setup() (3x)
          .           
          .               // a casa inicial recebe o valor de passo 1
         42 ( 0.00%)      tile[x][y].p = passo = visitadas = 1;
          .           
         18 ( 0.00%)      ride(x, y, 0);
881,614,254 (99.14%)  => passeio.h:ride(int, int, int) (3x)
          9 ( 0.00%)      flushRide(saida);  // imprime passeio de acordo com as normas do TP
    739,925 ( 0.08%)  => passeio.h:flushRide(_IO_FILE*) (3x)
          .               // displayChessBoard(1); // imprime no terminal o passeio alinhado e visualmente organizado (mais fácil visualizar)
          .           
          .               // Dá flush no buffer e fechar o arquivo
         16 ( 0.00%)      fclose(saida);
      1,348 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_fxsave (1x)
      1,248 ( 0.00%)  => ./libio/iofclose.c:fclose@@GLIBC_2.2.5 (2x)
          .               // limpa o valor das variáveis preparando para próxima execuaçao da funação
          3 ( 0.00%)      limpa();
    626,967 ( 0.07%)  => passeio.h:limpa() (3x)
          9 ( 0.00%)  }
          .           
          .           // void de cavalga percorrendo as casas
     82,926 ( 0.01%)  void ride(int x, int y, int ridingBack) {  // track = diminui acessibilidade da casa // ridingback = fazendo backTrack ou não
     41,463 ( 0.00%)      if (passo <= 0 && visitadas > 8) {
          .                   return;
          .               }
          .           
          .               // Se está fazendo backtracking e há um movimento ainda não explorado naquela casa e NAQUELE PASSO
    103,386 ( 0.01%)      if (ridingBack && tile[x][y].a > 0) {
          .                   // for duplo que percorre a matriz do tabuleiro
    353,496 ( 0.04%)          for (int j = 0; j < dim; j++) {
  7,069,920 ( 0.80%)              for (int i = 0; i < dim; i++) {
  8,157,600 ( 0.92%)                  updateKnightMoves(i, j, 1);  // atualiza as movimentações possíveis, mvmnt[], de todas as casas
848,387,606 (95.41%)  => passeio.h:updateKnightMoves(int, int, int) (1,359,600x)
          .                       }
          .                   }
          .           
          .                   // for que percorre o vetor persistent APENAS da casa atual
    118,965 ( 0.01%)          for (int i = 1; i < 9; i++) {
    571,032 ( 0.06%)              if (tile[x][y].persistent[i] == passo) {  // checa, no vetor persistent[i], se o movimento i já foi tentado neste mesmo passo
    112,846 ( 0.01%)                  tile[x][y].mvmnt[i] = 0;              // se o movimento i já foi tentado antes neste msm passo, o moviento i se torna indisponível
    139,398 ( 0.02%)                  tile[x][y].a--;                       // acessibilidade portanto diminui
          .                       }
          .                   }
     71,379 ( 0.01%)          tile[x][y].persistent[0]++;  // incrementa o número de tentativas mal-sucedidas na casa (essa variável não é usada)
          .               }
          .           
     82,926 ( 0.01%)      int move = bestMove(x, y);  // calcula o melhor moviemnto. Caso não haja movimentos disponíveis retorna zero.
      8,182 ( 0.00%)  => passeio.h:bestMove(int, int) (3x)
          .           
     27,642 ( 0.00%)      if (move <= 0) {  // não achou saída
          .                   // retorna pra casa e passo anterior para tentar outra movimentação
     18,936 ( 0.00%)          passo--;
     18,936 ( 0.00%)          regredidas++;
     63,120 ( 0.01%)          tile[x][y].p = 0;  // a casa sem saída atual tem o contador de passo zerado
          .           
    151,488 ( 0.02%)          ride(tile[x][y].prevX, tile[x][y].prevY, 1);  // retrocede para casa anterior. (cavalga de volta)
2,782,543,625,177 (312914.2%)  => passeio.h:ride(int, int, int)'2 (6,312x)
          .                   // o último argumento do void ride = 1, sinaliza que se está retornando (fazendo backtrack)
      6,312 ( 0.00%)          return;
          .               }
          .           
    157,689 ( 0.02%)      tile[x][y].a--;  // a casa ocupada perde um de liberdade, pois o knight se moverá dali
    127,653 ( 0.01%)      tile[x][y].mvmnt[move] = 0;
    142,671 ( 0.02%)      tile[x][y].persistent[move] = passo;
          .           
     22,527 ( 0.00%)      passo++;
          .           
     52,563 ( 0.01%)      int nx = qualCasa(x, y, move).x;
        796 ( 0.00%)  => passeio.h:qualCasa(int, int, int) (3x)
     60,072 ( 0.01%)      int ny = qualCasa(x, y, move).y;
        796 ( 0.00%)  => passeio.h:qualCasa(int, int, int) (3x)
          .           
     82,599 ( 0.01%)      tile[nx][ny].p = passo;
     82,599 ( 0.01%)      tile[nx][ny].prevX = x;
     82,599 ( 0.01%)      tile[nx][ny].prevY = y;
          .           
     22,527 ( 0.00%)      visitadas++;
          .           
     45,054 ( 0.01%)      if (passo == dim * dim) {
          3 ( 0.00%)          return;
          .               }
     45,036 ( 0.01%)      ride(nx, ny, 0);  // cavalga para próxima casa
881,604,045 (99.14%)  => passeio.h:ride(int, int, int)'2 (3x)
      7,506 ( 0.00%)      return;
     27,642 ( 0.00%)  }
          .           
          .           // dada uma certa casa, retorna o índice do melhor movimento usando a Regra de Warnsdorff como heurística.
          .           // Retorna zero se não houver movimento  disponível
     82,926 ( 0.01%)  int bestMove(int x, int y) {
    216,314 ( 0.02%)      int menor = (tile[x][y].mvmnt[1] > 0) ? tile[x][y].mvmnt[1] : 9;  // inicialmente atribui a menor liberdade ao primeiro mvmnt ou uma liberdade invalida e alta
    195,776 ( 0.02%)      int best = (tile[x][y].mvmnt[1] > 0) ? 1 : 0;                     // inicialmente atribui o índice de melhor movimento ao primeiro mvmnt se disponnível. Caso não disponível, atribui ao índice zero
          .           
    165,852 ( 0.02%)      if (tile[x][y].a <= 0) {  // caso não haja movimentos possíveis (ou não testados neste passo) retorna
     12,624 ( 0.00%)          return 0;
          .               }
          .           
    262,815 ( 0.03%)      for (int i = 1; i < 9; i++) {  // laço que testa os 8 movimentos do cavalo
  1,081,296 ( 0.12%)          int mvi = tile[x][y].mvmnt[i];
          .           
  1,141,368 ( 0.13%)          if (tile[x][y].mvmnt[i] <= 0) {  // movimento inválido ou leva para casa já vistiada
     90,582 ( 0.01%)              continue;
          .                   }
    103,467 ( 0.01%)          coordenadas candidata = qualCasa(x, y, i);  // a posição da casa que o movimento i leva (a possível casa analisada nesta iteração)
  3,646,162 ( 0.41%)  => passeio.h:qualCasa(int, int, int) (14,781x)
     29,562 ( 0.00%)          int xx = candidata.x;
     29,562 ( 0.00%)          int yy = candidata.y;
          .           
    177,372 ( 0.02%)          if (tile[xx][yy].p > 0) {  // não deveria ser necessário (checa se a casa já foi visitada)
          .                       continue;
          .                   }
    280,839 ( 0.03%)          if (tile[x][y].mvmnt[i] > 0) {      // a casa candidata já tem sua liberdade e movimento de retorno restringido
    310,401 ( 0.03%)              tile[xx][yy].a--;               // toda casa válida testada perde 1 de acessibilidade, pois não se poderá voltar a casa ocupada
    266,058 ( 0.03%)              tile[xx][yy].mvmnt[9 - i] = 0;  // invalida o movimento da possível casa de destino que leva a casa atual
          .                   }
    561,678 ( 0.06%)          if (tile[x][y].mvmnt[i] > 0 && tile[x][y].mvmnt[i] < menor) {  // testa qual movimento leva a uma casa com menor liberdade
    129,906 ( 0.01%)              menor = tile[x][y].mvmnt[i];
     21,651 ( 0.00%)              best = i;
    287,432 ( 0.03%)          } else if (tile[x][y].mvmnt[i] > 0 && tile[x][y].mvmnt[i] == menor) {  // caso as liberdades forem iguais, seleciona a de maior marginalidade
    120,290 ( 0.01%)              int margBest = tile[qualCasa(x, y, best).x][qualCasa(x, y, best).y].m;
  1,942,044 ( 0.22%)  => passeio.h:qualCasa(int, int, int) (10,460x)
     57,530 ( 0.01%)              int margMv = tile[xx][yy].m;
          .           
     15,690 ( 0.00%)              if (margMv >= margBest) {  // caso as marginalidades também forem iguais, seleciona a útlima checada
     64,368 ( 0.01%)                  menor = tile[x][y].mvmnt[i];
     10,728 ( 0.00%)                  best = i;
          .                       }
          .                   }
          .               }
      7,509 ( 0.00%)      return best;
     41,463 ( 0.00%)  }
          .           
          .           // Recebe as coordenadas de uma casa de origem e um movimento (mv) e retorna a casa de destino.
    241,554 ( 0.03%)  coordenadas qualCasa(int x, int y, int mv) {
          .               int ml, mc;
          .           
          .               // determina a variação de linha e coluna que o movimento indica
          .               // Movimentos pares são para cima, movimentos ímpares para baixo (olhar documentação)
     80,518 ( 0.01%)      if (mv <= 4) {                             // movimentos da esquerda
    201,144 ( 0.02%)          mc = -2 + (mv - 1) / 2;                // calcula variação de coluna em função do movimento
    477,717 ( 0.05%)          ml = (3 - abs(mc)) * pow(-1, mv - 1);  // calcula a variação de linha de acordo com a coluna.
  3,462,489 ( 0.39%)  => /usr/include/c++/10/cmath:__gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int) (25,143x)
     30,232 ( 0.00%)      } else if (mv >= 5) {                      // movimentos da direita
    120,928 ( 0.01%)          mc = -1 + (mv - 1) / 2;                // calcula variação de coluna em função do movimento
    272,088 ( 0.03%)          ml = (3 - abs(mc)) * pow(-1, mv - 1);  // calcula variação de linha em função da coluna
  2,894,566 ( 0.33%)  => /usr/include/c++/10/cmath:__gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int) (15,116x)
          .               }
          .           
          .               coordenadas p;  // posição determinada pelo movimento mv a partir daquela casa
    161,036 ( 0.02%)      p.y = y + ml;
    161,036 ( 0.02%)      p.x = x + mc;
          .           
  1,046,734 ( 0.12%)      if (p.x >= 0 && p.x < dim && p.y >= 0 && p.y < dim && tile[p.x][p.y].p <= 0) {  // se casa válida e não visitada
     80,518 ( 0.01%)          return p;                                                                   // retorna a nova posição
          .               } else {                                                                        // caso tenha havido algum erro, continua na mesma casa
          .                   coordenadas same;
          .                   same.x = x;
          .                   same.y = y;
          .                   return same;  // retorna a casa atual (a mesma que já se está)
          .               }
     80,518 ( 0.01%)  }
          .           
          .           // atualiza os movimentos possíveis de uma casa [tile] específica. Retorna sua acessibilidade (a atual liberdae de movimentos daquela casa)
  9,858,480 ( 1.11%)  int updateKnightMoves(int x, int y, int assign) {
  1,643,080 ( 0.18%)      int freedom = 0;
  1,643,080 ( 0.18%)      int mvmnt = 0;
          .           
          .               // for e condições que determinam os 8 movimentos do cavalo
 37,790,840 ( 4.25%)      for (int c = -2; c <= 2; c++) {
 18,073,880 ( 2.03%)          if (c == 0) continue;
 85,440,160 ( 9.61%)          int l = (((abs(c) + 2) % 2) + 1);
          .           
  6,572,320 ( 0.74%)          mvmnt++;
          .                   // todas as variações a direita -já que c é sempre positivo
138,854,008 (15.61%)          if (x + c >= 0 && x + c < dim && y + l >= 0 && y + l < dim) {  // se o movimento é válido
 92,480,320 (10.40%)              if (tile[x + c][y + l].p <= 0) {                           // tile não visitado                          // se a casa não foi previamente visitada
    433,344 ( 0.05%)                  freedom++;
  4,818,608 ( 0.54%)                  if (assign != 0) tile[x][y].mvmnt[mvmnt] = updateKnightMoves(x + c, y + l, 0);
 79,515,552 ( 8.94%)  => passeio.h:updateKnightMoves(int, int, int)'2 (141,140x)
  8,709,672 ( 0.98%)                  if (tile[x][y].mvmnt[mvmnt] == 0) tile[x][y].mvmnt[mvmnt] = 1;  // só para garantir que movimento válido não seja 0;
          .                       } else {
 90,893,492 (10.22%)                  tile[x][y].mvmnt[mvmnt] = 0;
          .                       }
          .                   }
          .           
  6,572,320 ( 0.74%)          mvmnt++;
          .                   // todas avariações a esquerda, já que c é sempre positivo
130,396,404 (14.66%)          if (x + c >= 0 && x + c < dim && y - l >= 0 && y - l < dim) {
 86,700,300 ( 9.75%)              if (tile[x + c][y - l].p <= 0) {  // tile não visitado
    433,344 ( 0.05%)                  freedom++;
  4,677,468 ( 0.53%)                  if (assign != 0) tile[x][y].mvmnt[mvmnt] = updateKnightMoves(x + c, y - l, 0);
 79,095,978 ( 8.89%)  => passeio.h:updateKnightMoves(int, int, int)'2 (141,140x)
  8,712,210 ( 0.98%)                  if (tile[x][y].mvmnt[mvmnt] == 0) tile[x][y].mvmnt[mvmnt] = 1;  // só para garantir que movimento válido não seja 0;
          .                       } else {
 96,240,168 (10.82%)                  tile[x][y].mvmnt[mvmnt] = 0;
          .                       }
          .                   }
          .               }
 18,073,880 ( 2.03%)      tile[x][y].a = freedom;
  1,643,080 ( 0.18%)      return freedom;
  3,286,160 ( 0.37%)  }
          .           // reinicializa as variaveis com valor 0, para a próxima execução
          6 ( 0.00%)  void limpa() {
        312 ( 0.00%)      for (int y = 0; y < dim; y++) {
      6,240 ( 0.00%)          for (int x = 0; x < dim; x++) {
     12,000 ( 0.00%)              tile[x][y].p = 0;  // atribui -1 inicialmente a todos os tiles (output concerns)
      1,200 ( 0.00%)              int i = 0;
     34,800 ( 0.00%)              while (i < 9) {  // loop que percorre os 8 mvmnt e persistent de cada title[dim][dim]
    561,600 ( 0.06%)                  tile[x][y].persistent[i] = tile[x][y].mvmnt[i] = 0;
     10,800 ( 0.00%)                  i++;
          .                       }
          .                   }
          .               }
          9 ( 0.00%)  }
          .           // reseta as variáveis para seus valores iniciais de acessibilidade, movimentos e persistencia)
          9 ( 0.00%)  void setup() {
         15 ( 0.00%)      visitadas = regredidas = passo = 0;
          3 ( 0.00%)      dim = DIMENSIONS;
          .           
        312 ( 0.00%)      for (int y = 0; y < dim; y++) {  // for duplo for que percorre a matriz (tabuleiro)
      6,240 ( 0.00%)          for (int x = 0; x < dim; x++) {
     12,000 ( 0.00%)              tile[x][y].p = 0;            // atribui 0 inicialmente a todas as casas (tiles)
      7,200 ( 0.00%)              updateKnightMoves(x, y, 1);  // seta os valores iniciais de acessibilidade e dos movimentos inicialmente possíveis
  5,559,012 ( 0.63%)  => passeio.h:updateKnightMoves(int, int, int) (1,200x)
      1,200 ( 0.00%)              int i = 0;
     34,800 ( 0.00%)              while (i < 9) {  // laço que inicializa com zero a persistencia de todas as casas
    194,400 ( 0.02%)                  tile[x][y].persistent[i] = 0;
     10,800 ( 0.00%)                  i++;
          .                       }
          .                   }
          .               }
          6 ( 0.00%)      setMarginalidade(0);  // atribui a marginalidade de cada casa de acordo com as dimensões do tabuleiro
    198,695 ( 0.02%)  => passeio.h:setMarginalidade(int) (3x)
          9 ( 0.00%)  }
          .           // retorna a marginalidade em função da posição da casa. Quanto maior, mais periférica é a casa.
      6,000 ( 0.00%)  int marginalidade(int x, int y) {
      9,600 ( 0.00%)      float r = (dim + 1) / 2.0;
     50,400 ( 0.01%)      float c = round(round((float)(r - (x + 1)) * (float)(r - (x + 1))) + round((float)(r - (y + 1)) * (float)(r - (y + 1))));
    100,796 ( 0.01%)  => /usr/include/c++/10/cmath:std::round(float) (3,600x)
      2,400 ( 0.00%)      return c;
      2,400 ( 0.00%)  }
          .           
          .           // atribui a marginalidade de cada casa de acordo com as dimensões do tabuleiro.
         12 ( 0.00%)  void setMarginalidade(int display) {
          6 ( 0.00%)      if (display) printf("\n //////     MARGINALIDADE     //////// \n");
        312 ( 0.00%)      for (int y = 0; y < dim; y++) {
      6,240 ( 0.00%)          for (int x = 0; x < dim; x++) {
     18,000 ( 0.00%)              tile[x][y].m = marginalidade(x, y);
    171,596 ( 0.02%)  => passeio.h:marginalidade(int, int) (1,200x)
      2,400 ( 0.00%)              if (display != 0) printf(" %d ", tile[x][y].m);
          .                   }
        120 ( 0.00%)          if (display) printf("\n");
          .               }
          9 ( 0.00%)  }
          .           
          .           // desenha a matriz (tabuleiro) em função dos passos de maneira visualmente organizada
          .           void displayChessBoard(int simple) {
          .               // simple != 0 : imprimie apenas os passos do passeio
          .               // simple == 0 : imprime passos do passeio e a atual acessibilidade daquela casa
          .               // printf("\n //////     TABULEIRO     //////// \n");
          .               for (int y = 0; y < dim; y++) {
          .                   for (int x = 0; x < dim; x++) {
-- line 306 ----------------------------------------
-- line 331 ----------------------------------------
          .                       }
          .                       printf("| ");
          .                   }
          .                   printf("\n");
          .               }
          .           }
          .           
          .           // Imprime tabuleiro e passeio conforme especificações do TP.
         12 ( 0.00%)  void flushRide(FILE *arq) {
        312 ( 0.00%)      for (int y = 0; y < dim; y++) {
      6,240 ( 0.00%)          for (int x = 0; x < dim; x++) {
     19,204 ( 0.00%)              fprintf(arq, "%d ", tile[x][y].p);
    707,282 ( 0.08%)  => ./stdio-common/fprintf.c:fprintf (1,199x)
      1,728 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_fxsave (1x)
          .                   }
        304 ( 0.00%)          fprintf(arq, "\n");
        715 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_fxsave (1x)
      1,121 ( 0.00%)  => ./libio/fputc.c:fputc (59x)
          .               }
         24 ( 0.00%)      fprintf(arq, "%d %d\n", visitadas, regredidas);
      2,974 ( 0.00%)  => ./stdio-common/fprintf.c:fprintf (3x)
          9 ( 0.00%)  }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./math/../sysdeps/ieee754/dbl-64/e_pow.c

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
881,834,316 (99.17%)  events annotated

