O programa utilizado será uma implementação de passeio do cavalo feita semestre passado para aula de Matemática Discreta por mim, Marcos Dias.

Explicando brevemente o o código recebe uma posição inicial no tabuleiro do usuário e imprime num arquivo um passeio válido.
Para tanto, uma vez dada a posição inicial, antes do primeiro movimento o programa gera para cada casa não ocupada um array que categoriza cada movimento possível e classifica quão ótimo ele é.
Sempre que um movimento é feito o array das casas que dão acesso a nova casa movida é atualizada.

1.
    Este código certamente não terá uma boa localidade de referência espacial pq ele acessa múltiplos arrays por movimento:
    ex: O próprio movimento do cavalo não favorece um acesso contínuo na matriz de casas.
    ex: Para cada movimento do cavalo até 8 arrays das 8 possíveis casas são atualizadas.

  Em termos de localidade de referência temporal a heurística utilizada faz com que haja poucas chances de haver modificação na matriz de casas visitadas (na função "ride") e o movimento do cavalo faz com que haja constantes leituras e modificações do vetor de movimento de cada casa (no método "BestMove"), porém de maneira sempre não contínua e raramente reincidente no mesmo espaço de memória.


2.
    O programa executará três vezes em casas diferentes de um tabuleiro relativamente grande (20x20) executando vários backtrackings e sera analisado a taxa de misses do SO em situar o espaço de memório chamado pelo programa na memória-cache certa. Isso porque a natureza da implementação feita exige a chamada de diversos arrays um atrás do outro porém as variáveis acessadas em cada array raramente são contínuas.
    

3.
O programa executará, em um tabuleiro de 20x20, 3 passeios completos começando em casas diferentes. Para informar a casa inicial usaremos o desvio do buffer de entrada padrão (teclado) para um arquivo de texto (Entradas.txt) contendo as cordenadas iniciais. No primeiro passeio o programa efetuará cerca de 6mil backtrackings, no segundo poco mais de 140 backtrackings e no último executará apenas 33 backtrackings.


4.1.
    valgrind --tool=cachegrind ./a.out <Entradas.txt 

==1782== Cachegrind, a cache and branch-prediction profiler
==1782== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==1782== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==1782== Command: ./a.out
==1782== 
digite as coordenadas: digite as coordenadas: digite as coordenadas: ==1782== 
==1782== I   refs:      889,238,069
==1782== I1  misses:          1,507
==1782== LLi misses:          1,363
==1782== I1  miss rate:        0.00%
==1782== LLi miss rate:        0.00%
==1782== 
==1782== D   refs:      330,001,065  (296,162,198 rd   + 33,838,867 wr)
==1782== D1  misses:      1,976,739  (  1,289,255 rd   +    687,484 wr)
==1782== LLd misses:         15,909  (      2,757 rd   +     13,152 wr)
==1782== D1  miss rate:         0.6% (        0.4%     +        2.0%  )
==1782== LLd miss rate:         0.0% (        0.0%     +        0.0%  )
==1782== 
==1782== LL refs:         1,978,246  (  1,290,762 rd   +    687,484 wr)
==1782== LL misses:          17,272  (      4,120 rd   +     13,152 wr)
==1782== LL miss rate:          0.0% (        0.0%     +        0.0%  )

4.2.
    cg_annotate cachegrind.out.1781 >> cachegrind.out.1781.txt
    *Registrado em arquivo separado, porque ficaria muito extenso e inelegível neste relatório.


5.1
     valgrind --tool=callgrind ./a.out <Entradas.txt 
==1816== Callgrind, a call-graph generating cache profiler
==1816== Copyright (C) 2002-2017, and GNU GPL'd, by Josef Weidendorfer et al.
==1816== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==1816== Command: ./a.out
==1816== 
==1816== For interactive control, run 'callgrind_control -h'.
digite as coordenadas: digite as coordenadas: digite as coordenadas: ==1816== 
==1816== Events    : Ir
==1816== Collected : 889235259
==1816== 
==1816== I   refs:      889,235,259

5.2
    callgrind_annotate callgrind.out.1816 > callgrind.out.1816.txt
    *Registrado em arquivo separado, devido ao extenso escopo deste tipo de log.
    

6.1.
    O programa apresenta inúmeros "misses" na hora de precisar onde a localidade da memória necessária está. Segundo o relatório de cachegrind 25% destes misses estão na função BestMove - que analisa as (até) 8 possíveis opções de movimento que o cavalo teria caso se movese para cada uma das (até) 8 opções de casa que possui - para cada movimento. Segundo o log de callgrind, a Função BestMove foi a segunda mais chamada, estando atrás apenas da função Ride que, por sua vez, entre outras coisas chama a função BestMove.
    
6.2.
    As estruturas mais claramente referidas nestes logs são os arrays de 9 entradas contendo o nível de liberdade de cada casa e o nível de liberdade conseguido após se executar cada um dos 8 movimentos possíveis a partir de cada casa. Não coincidentemente, o método que lida com estes n*n arrays é o que possui mais misses de localidade de referência - Best Move. 
    Em uma abordagem recursiva esses arrays podem ser dispensados, deixando as checagens de possíveis movimentos para a própria pilha de recursão. No entanto, uma outra saída deve ser adotada para priorizar as casas com menos liberdade na escolha do próximo movimento - segundo a herística utilizada.

    Isso pode ser feito utilizando-se um único vetor temporário que, ao abrir uma recusão (movimentar-se) checa o nível de liberdade das casas adjacentes e às visita em ordem crescente deste nível de liberdade. Uma vez que todas as casas adjacentes daqule passo foram visitadas, este vetor seria destruído com o fechamento daquela chamada recursiva e retorno para função anterior da pilha.
    
6.3.
    O método BestMove deve ser inteiro substituído por uma sequência de códigos que retorna apenas o nível de liberdade de cada casa vizinha em um array local - podendo ser feito tanto como uma função que retorna um array ou quanto como um loop preenchimento de array local no próprio método Ride. De toda forma, esses cálculos devem ser feitos apenas quando o cavalo faz um movimento - e não feito em dois níveis de profundidade de fast-foward e feitos de antemão sobre todas as casas, como atualmente se está fazendo.

